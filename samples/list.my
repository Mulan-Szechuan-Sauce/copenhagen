type Functor:
  def map(self, function)

class List(Functor):
  Nil()
  Cons(head, tail)

def map(Nil(), f):
  return Nil()

def map(head|tail, f):
  return (f(head)) | (map(tail, f))

def foldLeft(acc, Nil(), f):
  return acc

def foldLeft(acc, head|tail, f):
  newAcc = f(acc, head)
  return foldLeft(newAcc, tail, f)

def add1(x):
  return x + 1

def sum2(a, b):
  return a + b

debug(map(3 | 2 | Nil(), add1))
debug(foldLeft(0, 4 | 3 | 7 | [], sum2))
debug(foldLeft(0, [3, 2, 1, 0], sum2))
