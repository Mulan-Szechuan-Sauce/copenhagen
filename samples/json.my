class JsonValue:
  JsonNull
  JsonBool(value)
  JsonNumber(value)
  JsonString(value)
  JsonArray(value)
  JsonObject(value)

instance JsonValue of Show:
  def str(JsonNull):
    return "null"

  def str(JsonBool(True)):
    return "true"

  def str(JsonBool(False)):
    return "true"

  def str(JsonNumber(num)):
    return str(num)

  def str(JsonString(str)):
    return "\"" <> str <> "\""

  def str(JsonArray(xs)):
    return "[" <> xs.map(str).join(",") <> "]"

  def str(JsonObject(xs)):
    def formatPair((name, value)):
      return "\"" <> name <> "\": " <> str(value)

    return "{" <> xs.map(formatPair).join(",") <> "}"

class Parser:
  Parser(runParser)

instance Parser of Functor:
  def map(Parser(run), f):
    return Parser((input): unwrap:
      (rest, result) <- run(input)
      wrap((rest, f(result)))
    )

instance Parser of Applicative:
  def wrap(value):
    return Parser((input): Just((input, value)))

  def apply(Parser(run1), Parser(run2)):
    return Parser((input): unwrap:
      (restA, resultA) <- run1(input)
      (restB, resultB) <- run2(restA)
      Just((restB, resultA(resultB)))
    )

instance Parser of Monad:
  def bind(parser, f):
    def parserJoin(p):
      return Parser((input): unwrap:
        (rest, result) <- run(p, input)
        run(result, rest)
      )

    return parserJoin(parser.map(f))

instance Parser of Alternative:
  def alt(Parser(run1), Parser(run2)):
    return Parser(
      (input): alt(run1(input), run2(input))
    )

def charP(x):
  def f(y|ys):
    return if y == x:
      Just((ys, x))
    else:
      None

  def f(Nil):
    return None

  return Parser(f)

def stringP(x):
  return x.map(charP).sequence()

def nonEmpty(Parser(runner)):
  return Parser((input): unwrap:
    res <- runner(input)
    
    if len(snd(res)) == 0:
      None
    else:
      Just(res)
  )

def jsonNull():
  return stringP("null").mapConst(JsonNull)

def jsonBool():
  def boolCaseParser(stringV, boolV):
    return stringP(stringV).mapConst(JsonBool(boolV))

  return alt(
    boolCaseParser("true", True),
    boolCaseParser("false", False)
  )

def spanP(predicate):
  return Parser(
    (input): Just(swap(span(input, predicate)))
  )

def jsonNumber():
  return nonEmpty(spanP(isDigit)).map(
    (ds): JsonNumber(int(ds))
  )

def stringLiteral():
  return charP('"').applyr(spanP(notEquals('"'))).applyl(charP('"')) # "

def jsonString():
  return stringLiteral().map(JsonString)

def ws():
  return spanP(isSpace)

def sepBy(pSep, pElement):
  return pElement.map(Cons).apply(many(pSep.applyr(pElement))).alt(wrap([]))

def wsWrap(parser):
  return ws().applyr(parser).applyl(ws())

def jsonArray():
  return Parser(
    def (input):
      sep      = charP(',').wsWrap()
      elements = sepBy(sep, jsonValue())
      header   = charP('[').applyr(ws())
      footer   = ws().applyl(charP(']'))
      newp     = header.applyr(elements).applyl(footer).map(JsonArray)

      return run(newp, input)
  )

def jsonObject():
  return Parser(
    def (input):
      pairP = unwrap:
        JsonString(key) <- jsonString()
        _               <- charP(':').wsWrap()
        value           <- jsonValue()
        wrap((key, value))
  
      sep      = charP(',').wsWrap()
      elements = sepBy(sep, pairP)
      header   = charP('{').applyr(ws())
      footer   = ws().applyl(charP('}'))
      newp     = header.applyr(elements).applyl(footer).map(JsonObject)
  
      return run(newp, input)
  )

def jsonValue():
  parsers = [
    jsonBool(),
    jsonNumber(),
    jsonString(),
    jsonArray(),
    jsonObject()
  ]

  return parsers.foldl(jsonNull(), alt)

def run(Parser(runner), input):
  return runner(input)

def showJson(Just((Nil, parsed))):
  return str(parsed)

def showJson(_):
  return "Bad input JSON"

__main__ = unwrap:
  lines <- inputLines().map((lines): lines.join(""))
  print(showJson(run(jsonValue(), lines)))