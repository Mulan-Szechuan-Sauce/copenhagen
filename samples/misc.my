debug(3 - 3 * 2)
debug(Just(4).alt(wrap(3)))
debug(wrap(4).alt(Just(3)))
debug(Just(4).alt(Just(3)))
debug(None.alt(wrap(3)))
debug(wrap(4).alt(wrap(5)))

debug(unwrap:
  a <- [1, 2, 3]
  b <- [7]
  wrap([a, b]))

debug(Just(3).bind((a): wrap(7).bind((b): Just(a + b))))
debug(bind(Just(3), (a): bind(wrap(7), (b): wrap(b + a))))

debug(unwrap:
  a <- Just(3)
  b <- Just(7)
  wrap(a + b))

debug("hello" <> " world" <> " yeet")
debug(Just(" world") <> wrap(" woot") <> Just(" whauuuuu"))

class SumMonoid:
  Sum(value)

instance SumMonoid of Semigroup:
  def append(Sum(first), Sum(second)):
    return Sum(first + second)

instance SumMonoid of Monoid:
  def mempty():
    return Sum(0)

instance SumMonoid of Show:
  def str(Sum(value)):
    return str(value)

instance SumMonoid of IntCastable:
  def int(Sum(value)):
    return value

class ProductMonoid:
  Product(value)

instance ProductMonoid of Semigroup:
  def append(Product(first), Product(second)):
    return Product(first * second)

instance ProductMonoid of Monoid:
  def mempty():
    return Product(1)

instance ProductMonoid of Show:
  def str(Product(value)):
    return str(value)

instance ProductMonoid of IntCastable:
  def int(Product(value)):
    return value

debug(Product(4) <> Product(3))
debug(Sum(4) <> Sum(3))
debug(Sum(4) <> mempty())

debug([1] <> mempty())
debug([1, 2, 3, 4].map(Sum).foldl(mempty(), append).int())

a = Just
debug(a(3))

class Blitzmax:
  Blitz(a, b, c, d, e)

b = Blitz(1, 2, 3)
debug(b(4, 5))

def foo(a, b):
  return a + b

debug(debug(append([1]))([4, 5]))
debug([1, 2, 3].map(add(1)))

debug(catMaybes([Just(3), Just(4), None, Just(7)]))
debug([1, 2, 3, 4, 5].mapMaybe(
  def (x):
    return if x < 3:
      Just(x)
    else:
      None
))

debug(Just(3).traverse((x): [x, x + 1]))
#debug(append(None.traverse((x): [x, x + 1]), [Just(3)]))

def replaceChar(unwanted, wanted, actual):
  return if unwanted == actual:
    wanted
  else:
    actual

debug("hello".map(replaceChar('h', 'm')))

def shitPants(num):
  return if num == 3:
    -5
  else:
    num + 1

debug([1, 2, 3, 4].map(shitPants).map(shitPants).map(shitPants))
