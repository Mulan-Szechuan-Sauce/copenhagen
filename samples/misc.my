debug(3 - 3 * 2)
debug(wrap(4).alt(wrap(5)))

debug(unwrap:
  a <- [1, 2, 3]
  b <- [7]
  wrap([a, b]))

debug(Just(3).bind((a): wrap(7).bind((b): Just(a + b))))
debug(bind(Just(3), (a): bind(wrap(7), (b): wrap(b + a))))

debug(unwrap:
  a <- Just(3)
  b <- Just(7)
  wrap(a + b))

class Blitzmax:
  Blitz(a, b, c, d, e)

b = Blitz(1, 2, 3)
debug(b(4, 5))

debug(debug(append([1]))([4, 5]))
debug([1, 2, 3].map(add(1)))

debug([1, 2, 3, 4, 5].mapMaybe(
  def (x):
    return if x < 3:
      Just(x)
    else:
      None
))

def replaceChar(unwanted, wanted, actual):
  return if unwanted == actual:
    wanted
  else:
    actual

debug("hello".map(replaceChar('h', 'm')))

def shitPants(num):
  return if num == 3:
    -5
  else:
    num + 1

debug([1, 2, 3, 4].map(shitPants).map(shitPants).map(shitPants))

def cartesian(xs, ys):
  return unwrap:
    x <- xs
    y <- ys
    wrap([x, y])

debug([1, 2, 3].cartesian([4, 5, 6]))
debug(Just(1).cartesian(Just(2)))

def foo(x):
  y = x + 3

  return def ():
    return y

debug(foo(1)())