class Maybe:
  None
  Just(value)

class Either:
  Left(value)
  Right(value)

instance Either of Functor:
  def map(Right(value), f):
    return Right(f(value))

  def map(l, _):
    return l

instance Maybe of Functor:
  def map(Just(value), f):
    return Just(f(value))

  def map(None, _):
    return None

instance Maybe of Foldable:
  def foldl(Just(value), initial, folder):
    return folder(initial, value)

  def foldl(None, initial, _):
    return initial

  def len(Just(_)):
    return 1

  def len(_):
    return 0

instance Maybe of Applicative:
  def apply(Just(f), inputMaybe):
    return map(inputMaybe, f)

  def apply(None, inputMaybe):
    return None

instance Maybe of Monad:
  def bind(Just(value), f):
    return f(value)

  def bind(None, _):
    return None
