class StateT:
  # stateFunc: s -> m (a,s) 
  StateT(stateFunc)

def runState(state, initialState):
  return runIdentity(runStateT(state, initialState))

def evalState(state, initialState):
  return runIdentity(evalStateT(state, initialState))

def runStateT(StateT(f), initialState):
  return f(initialState)

def evalStateT(state, initialState):
  return runStateT(state, initialState).map(fst)

def get():
  return StateT((s): wrap((s, s)))

def put(newState):
  return StateT((_): wrap(((), newState)))

instance StateT of Functor:
  # stateF: s -> m (a, s)
  # want: s -> m (f a, s)
  def map(StateT(stateF), f):
    return StateT(
      (s): unwrap:
        (a, firstState) <- stateF(s)
        wrap((f(a), firstState))
    )

instance StateT of Applicative:
  def apply(StateT(sFunc), StateT(sValue)):
    return StateT(
      (s): unwrap:
        (f, firstState)    <- sFunc(s)
        (val, secondState) <- sValue(firstState)
        wrap((f(val), secondState))
    )

  def wrap(value):
    return StateT((s): wrap((value, s)))

instance StateT of Monad:
  def bind(StateT(stateFunc), f):
    def extract(StateT(inner)):
      return inner

    return StateT(
      (s): unwrap:
        (a, firstS) <- stateFunc(s)
        extract(f(a))(firstS)
    )

instance StateT of MonadTransformer:
  def lift(toLift):
    return StateT(
      (s): unwrap:
        a <- toLift
        wrap((a, s))
    )