class IO:
  IO(worldt)

instance IO of Functor:
  def map(io, func):
    return io.bind((x): wrap(func(x)))

instance IO of Applicative:
  def wrap(v):
    return IO((w): (v, w))

  def apply(ioFunc, ioVal):
    return unwrap:
      f <- ioFunc
      v <- ioVal
      wrap(f(v))

instance IO of Monad:
  # worldT: World -> (a, World)
  # f:      a -> IO(World -> (b, World))
  # Return: IO(World -> (b, world))
  def bind(IO(worldT), f):
    return IO(
      def (w):
        (a, newW) = worldT(w)
        return unIO(f(a))(newW)
    )

def unIO(IO(io)):
  return io

def print(input):
  return IO((w): printStrT(input, w))

def input():
  return IO((w): readStrT(w))

# Read lines from STDIN, until an EOF is hit
# Returns the list of lines
def inputLines():
  return unwrap:
    maybeInput <- input()

    case maybeInput:
      Just(in): inputLines().map((rest): in|rest)
      None:     wrap([])