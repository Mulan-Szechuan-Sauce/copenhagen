class Maybe:
  None
  Just(value)

instance Maybe of Show:
  def str(None):
    return "None"

  def str(Just(val)):
    return "Just(" + val.str() + ")"

instance Maybe of Functor:
  def map(Just(value), f):
    return Just(f(value))

  def map(_, _):
    return None

instance Maybe of Foldable:
  def foldl(Just(value), initial, folder):
    return folder(initial, value)

  def foldl(None, initial, _):
    return initial

  def len(Just(_)):
    return 1

  def len(_):
    return 0

instance Maybe of Applicative:
  def apply(Just(f), inputMaybe):
    return map(inputMaybe, f)

  def apply(None, _):
    return None

instance Maybe of Monad:
  def bind(Just(value), f):
    return f(value)

  def bind(None, _):
    return None

  def wrap(value):
    return Just(value)

instance Maybe of Equal:
  def equals(None, None):
    return True

  def equals(Just(val1), Just(val2)):
    return val1 == val2

  def equals(_, _):
    return False

instance Maybe of Ordered:
  def compare(None, None):
    return EQ

  def compare(Just(val1), Just(val2)):
    return compare(val1, val2)

  def compare(None, _):
    return LT

  def compare(_, None):
    return GT

instance Maybe of Semigroup:
  def append(Just(a), Just(b)):
    return Just(a <> b)

  def append(Just(a), None):
    return Just(a)

  def append(_, b):
    return b

instance Maybe of Alternative:
  def alt(Just(a), _):
    return Just(a)

  def alt(_, Just(b)):
    return Just(b)

  def alt(_, _):
    return None