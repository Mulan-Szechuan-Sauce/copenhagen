class Maybe:
  None
  Just(value)

instance Maybe of Show:
  def str(None):
    return "None"

  def str(Just(val)):
    return "Just(" + val.str() + ")"

instance Maybe of Functor:
  def map(Just(value), f):
    return Just(f(value))

  def map(_, _):
    return None

instance Maybe of Foldable:
  def foldl(Just(value), initial, folder):
    return folder(initial, value)

  def foldl(None, initial, _):
    return initial

instance Maybe of Applicative:
  def apply(Just(f), inputMaybe):
    return map(inputMaybe, f)

  def apply(None, _):
    return None

  def wrap(value):
    return Just(value)

instance Maybe of Monad:
  def bind(Just(value), f):
    return f(value)

  def bind(None, _):
    return None

instance Maybe of MonadPlus:
  def mplus(x, y):
    return alt(x, y)

  def mzero():
    return None

instance Maybe of Equal:
  def equals(None, None):
    return True

  def equals(Just(val1), Just(val2)):
    return val1 == val2

  def equals(_, _):
    return False

instance Maybe of Ordered:
  def compare(None, None):
    return EQ

  def compare(Just(val1), Just(val2)):
    return compare(val1, val2)

  def compare(None, _):
    return LT

  def compare(_, None):
    return GT

instance Maybe of Semigroup:
  def append(Just(a), Just(b)):
    return Just(a <> b)

  def append(Just(a), None):
    return Just(a)

  def append(_, b):
    return b

instance Maybe of Alternative:
  def alt(Just(a), s):
    return Just(a)

  def alt(s, Just(b)):
    return Just(b)

  def alt(_, _):
    return None

instance Maybe of Traversable:
  def traverse(None, _):
    return wrap(None)

  def traverse(Just(x), fun):
    return fun(x).map(Just)


def maybe(Just(x), _, transformer):
  return transformer(x)

def maybe(None, default, _):
  return default 


def isJust(Just(_)):
  return True

def isJust(_):
  return False


def isNone(None):
  return True

def isNone(_):
  return False


def fromMaybe(None, default):
  return default

def fromMaybe(Just(x), _):
  return x


def listToMaybe(Nil):
  return None

def listToMaybe(head|_):
  return Just(head)

#| Converts a maybe into a list
#|
#| @example
#| >>> maybeToList(Just(2))
#| [2]
#|
#| @example
#| >>> maybeToList(None)
#| []
#|
#| @param #1 Maybe(a)
#| @return [a]
def maybeToList(None):
  return []

def maybeToList(Just(x)):
  return [x]

#| Creates a new list containing only the Just values contained in the input list.
#|
#| @example
#| >>> catMaybes([Just(2), Nothing, Just(4)])
#| [2, 4]
#|
#| @param maybeList [Maybe(a)]
#| @return [a]
def catMaybes(maybeList):
  return maybeList.bind(maybeToList)

#| Apply a function that returns maybes to each element of the list.
#| Then create a new list containing only the Just values from that list.
#|
#| @example
#| >>> [1, 2, 3, 4, 5].mapMaybe(
#|       (x): if x < 4: Just(x) else: None
#|     )
#| [1, 2, 3]
#|
#| @param inputList [a]
#| @param fun (a): Maybe(b)
#| @return [b]
def mapMaybe(inputList, fun):
  return inputList.map(fun).catMaybes()
