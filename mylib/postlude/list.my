instance List of Traversable:
  def traverse(l, f):
    def consF(x, ys):
      return liftA2(Cons, f(x), ys)
    return l.foldr(wrap([]), consF)
 # http://hackage.haskell.org/package/base-4.14.0.0/docs/src/Data.Traversable.html#traverse
 # traverse f = List.foldr cons_f (pure [])
 #   where cons_f x ys = liftA2 (:) (f x) ys

def filter(Nil, _):
  return Nil

def filter(head|tail, f):
  return if f(head):
    head|filter(tail, f)
  else:
    filter(tail, f)

def head(Nil):
  return None

def head(head|tail):
  return Just(head)

def tail(Nil):
  return None

def tail(head|tail):
  return Just(tail)

def reverse(l):
  return l.foldl([], (acc, it): [it] <> acc)

